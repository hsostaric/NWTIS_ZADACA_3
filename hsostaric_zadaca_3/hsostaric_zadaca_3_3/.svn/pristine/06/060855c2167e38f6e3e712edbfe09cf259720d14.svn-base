/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.foi.nwtis.hsostaric.web.zrna;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.inject.Named;
import javax.faces.view.ViewScoped;
import lombok.Getter;
import lombok.Setter;
import org.foi.nwtis.hsostaric.ejb.eb.Korisnici;
import org.foi.nwtis.hsostaric.ejb.eb.Myairports;
import org.foi.nwtis.hsostaric.ejb.eb.Myairportslog;
import org.foi.nwtis.hsostaric.ejb.sb.KorisniciFacadeLocal;
import org.foi.nwtis.hsostaric.ejb.sb.MyairportsFacadeLocal;

/**
 *
 * @author Hrvoje-PC
 */
@Named(value = "korisniciAerodroma")
@ViewScoped
public class KorisniciAerodroma implements Serializable {

    @EJB
    KorisniciFacadeLocal korisniciFacadeLocal;

    @EJB
    MyairportsFacadeLocal myairportsFacadeLocal;

    @Getter
    List<Korisnici> korisnici = new ArrayList<>();
    @Getter
    List<Myairports> aerodromiKorisnika = new ArrayList<>();

    @Getter
    @Setter
    String odabraniKorisnik = null;

    @Getter
    @Setter
    private String vidljivostDrugogBloka;
    @Getter
    @Setter
    private String vidljivostTrecegBloka;
    @Getter
    @Setter
    private String poruka = "";
    @Getter
    @Setter
    private List<Myairportslog> evidentiraniZapisi = new ArrayList<>();

    @Getter
    @Setter
    private String prazniLetovi = "";

    public KorisniciAerodroma() {
    }

    @PostConstruct
    private void postaviVarijable() {
        sakrijDrugiBlok();
        sakrijTreciBlok();
        korisnici = korisniciFacadeLocal.findAll();
        System.out.println(korisnici.size());
    }

    public String dohvatiAerodromeKorisnika() {
        Korisnici korisnik = null;
        korisnik = korisniciFacadeLocal.find(odabraniKorisnik);
        aerodromiKorisnika = new ArrayList<>();
        aerodromiKorisnika = korisnik.getMyairportsList();
        if (aerodromiKorisnika.isEmpty()) {
            poruka = "Korisnik ne prati nikakve aerodrome !";
            sakrijDrugiBlok();
            sakrijTreciBlok();
        } else {
            poruka = "";
            prikaziDrugiBlok();
            sakrijTreciBlok();
        }
        return "";
    }

    private void sakrijDrugiBlok() {
        vidljivostDrugogBloka = "skriven";
    }

    private void prikaziDrugiBlok() {
        vidljivostDrugogBloka = "vidljiv";
    }

    private void sakrijTreciBlok() {
        vidljivostTrecegBloka = "skriven";
    }

    private void prikaziTreciBlok() {
        vidljivostTrecegBloka = "vidljiv";
    }

    public String formatirajLetove(List<Myairportslog> lista) {
        if (!lista.isEmpty()) {
            evidentiraniZapisi = new ArrayList<>(lista);
            prazniLetovi="";
            prikaziTreciBlok();
        }else{
            prazniLetovi="Odabrani aerodorm nema evidentiranih letova.";
        }
        

        return "";
    }
}
